{"version":3,"sources":["components/Sider/Toggler.js","components/Bar/Bar.js","components/Sider/Sider.js","components/Backdrop/Backdrop.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Toggler","props","className","onClick","click","Bar","togglerClickHandler","to","Sider","siderClass","show","Backdrop","Home","React","Component","App","state","siderOpen","setState","prev","backdropClickHandler","backdrop","this","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oYAWeA,G,YARC,SAAAC,GAAK,OACjB,4BAAQC,UAAU,UAAUC,QAASF,EAAMG,OACvC,yBAAKF,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,qBCkBRG,G,MAlBH,SAAAJ,GAAK,OACb,4BAAQC,UAAU,OACd,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAASE,MAAOH,EAAMK,uBAE1B,yBAAKJ,UAAU,aAAY,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAC3B,yBAAKL,UAAU,UACf,yBAAKA,UAAU,yBACX,4BACI,4BAAI,kBAAC,IAAD,CAAMK,GAAG,UAAT,QACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,cCKTC,G,MAjBD,SAAAP,GACV,IAAIQ,EAAa,CAAC,SAKlB,OAJGR,EAAMS,OACLD,EAAa,CAAC,eAId,yBAAKP,UAAWO,GACZ,4BACI,oCACA,4BAAI,kBAAC,IAAD,CAAMF,GAAG,SAASJ,QAASF,EAAMK,qBAAjC,QACJ,4BAAI,kBAAC,IAAD,CAAMC,GAAG,WAAWJ,QAASF,EAAMK,qBAAnC,YCVLK,G,MAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,UCM9BQ,E,iLANT,OACE,yD,GAHWC,IAAMC,WCqDVC,E,2MA1CbC,MAAQ,CACNC,WAAW,G,EAGbX,oBAAsB,WACpB,EAAKY,UAAS,SAACC,GACb,MAAO,CAACF,WAAYE,EAAKF,e,EAI7BG,qBAAuB,WACrB,EAAKF,SAAS,CACZD,WAAW,K,wEAKb,IAAII,EAKJ,OAJGC,KAAKN,MAAMC,YACZI,EAAW,kBAAC,EAAD,CAAUjB,MAAOkB,KAAKF,wBAIjC,kBAAC,IAAD,KACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,CAAKI,oBAAqBgB,KAAKhB,sBAC/B,kBAAC,EAAD,CAAOI,KAAMY,KAAKN,MAAMC,UAAWX,oBAAqBgB,KAAKhB,sBAC5De,EAHH,IAIE,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,SAASC,UAAWb,IAChC,kBAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWb,Y,GAjC9BE,aCAEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ddd618c.chunk.js","sourcesContent":["import React from 'react';\nimport './Toggler.css';\n\nconst Toggler = props => (\n    <button className=\"toggler\" onClick={props.click}>\n        <div className=\"toogler__line\"/>\n        <div className=\"toogler__line\"/>\n        <div className=\"toogler__line\"/>\n    </button>\n);\n\nexport default Toggler;","import React from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\nimport Toggler from '../Sider/Toggler';\nimport './Bar.css';\n\nconst Bar = props =>(\n    <header className=\"bar\">\n        <nav className=\"bar__navigation\">\n            <div className=\"bar__toggler\">\n                <Toggler click={props.togglerClickHandler}/>\n            </div>\n            <div className=\"bar__home\"><Link to=\"/\">Home</Link></div>\n            <div className=\"space\"/>\n            <div className=\"bar__navigation-items\">\n                <ul>\n                    <li><Link to=\"/about\">Foo</Link></li>\n                    <li><Link to=\"/contact\">Bar</Link></li>\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\n\nexport default Bar;","import React from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\nimport './Sider.css';\n\nconst Sider = props => {\n    let siderClass = ['sider'];\n    if(props.show){\n        siderClass = ['sider open'];\n    }\n\n    return (\n        <nav className={siderClass}>\n            <ul>\n                <li>Home</li>\n                <li><Link to=\"/about\" onClick={props.togglerClickHandler}>Foo</Link></li>\n                <li><Link to=\"/contact\" onClick={props.togglerClickHandler}>Bar</Link></li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Sider;","import React from 'react';\nimport './Backdrop.css';\n\nconst Backdrop = props => (\n    <div className=\"backdrop\" onClick={props.click}></div>\n);\n\nexport default Backdrop;","import React from 'react';\n\nclass Home extends React.Component {\n    render() {  \n      return (\n        <p>This is the home page!</p>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport Bar from './components/Bar/Bar';\nimport Sider from './components/Sider/Sider';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport Home from './components/Home/Home';\n\nclass App extends Component {\n  state = {\n    siderOpen: false,\n  };\n\n  togglerClickHandler = () => {\n    this.setState((prev) => {\n      return {siderOpen: !prev.siderOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({\n      siderOpen: false,\n    });\n  };\n\n  render(){\n    let backdrop;\n    if(this.state.siderOpen){\n      backdrop = <Backdrop click={this.backdropClickHandler}/>;\n    }\n  \n    return (\n      <Router>\n        <div className=\"App\">\n          <Bar togglerClickHandler={this.togglerClickHandler}/>\n          <Sider show={this.state.siderOpen} togglerClickHandler={this.togglerClickHandler}/>\n          {backdrop};\n          <main>\n            <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route path=\"/about\" component={Home}/>\n              <Route path=\"/contact\" component={Home}/>\n            </Switch>\n          </main>\n        </div>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}